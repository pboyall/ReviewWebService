{"version":3,"sources":["index.js","SqlliteDatabase.js","StringFormat.js","TaskAssignment.js","TaskRepository.js","TediousDatabase.js","testindex.js","teststring.js","testtedious.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACtHI,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACvB,IAAI,IAAI,GAAG,aAAa,CAAC;AACzB,IAAI,MAAM,GAAG,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AACjC,IAAI,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,CAAC;AAC3C,IAAI,GAAG,GAAG,oBAAoB,CAAC;;;;AAI/B,IAAI,QAAQ,GAAG,SAAX,QAAQ,GAAe,EAAE,CAAC;;;;AAI9B,QAAQ,CAAC,SAAS,CAAC,aAAa,GAAG,YAAY;AAC3C,QAAI,EAAE,GAAG,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AACpC,WAAO,EAAE,CAAC;CACb,CAAA;;AAED,QAAQ,CAAC,SAAS,CAAC,eAAe,GAAG,UAAU,GAAG,EAAE,QAAQ,EAAE;AAC1D,QAAI,EAAE,GAAG,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AACpC,WAAO,CAAC,GAAG,CAAC,cAAc,GAAG,GAAG,CAAC,CAAC;AAClC,WAAO,CAAC,GA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","file":"all.js","sourcesContent":["/*'use strict';\r\n\r\nconsole.log(\"Begin Web Service\");\r\n//Sanity Kill\r\nprocess.on('uncaughtException', function (err) {\r\n    console.log('Uncaught Exception ' + err + ' , quitting');\r\n    process.exit(1);\r\n});\r\n\r\nvar database = require('sqlite.js');\r\n\r\n//POC DB Query Code\r\n\r\nvar callmeandquit = function () {\r\n    console.log(\"Done - exit\");\r\n    process.exit();\r\n};\r\n\r\nvar callme = function () {\r\n    console.log(\"Done - keep running\");\r\n};\r\n\r\n\r\nvar sql = \"select * from Task\";\r\n\r\n//database.\r\nConnectAndQuery(sql, callmeandquit);\r\n\r\n\r\n//database.query(sql, callme);\r\n\r\n//End POC\r\n\r\n\r\n\r\n//Initial Attempt at making a repository work\r\n\r\nvar taskRepository = require('./TaskRepository.js');\r\nvar taskAssignment = require('./TaskAssignment.js');\r\n\r\n//3 refers to WorkFlowProcessId = it's magic\r\n\r\nvar wibble = new taskRepository({\r\n    WorkflowProcessId: 3,\r\n    dbContext: database\r\n});\r\n\r\nvar _TaskId = 1;\r\nvar _DateAssigned = '15/1/2015';\r\nvar _GroupId = '1';\r\nvar _AccessType = 1;\r\nvar _NodeId = 1;\r\n\r\nvar theTaskAssignment = new taskAssignment({\r\n    TaskId: _TaskId,\r\n    DateAssigned: _DateAssigned,\r\n    GroupId: _GroupId,\r\n    AccessType: _AccessType,\r\n    NodeId: _NodeId\r\n});\r\n\r\nwibble.save(theTaskAssignment, callme);\r\n\r\n//As this is node, it keeps running unless we exit\r\n\r\nprocess.exit();\r\n\r\n\r\nvar express = require('express');\r\nvar app = express();\r\n\r\nconsole.log(\"Registering endpoint: /\");\r\napp.get('/', function (req, res) {\r\n    res.send('hello ROOT world');\r\n});\r\n\r\nconsole.log(\"Registering endpoint: /stubbed\");\r\napp.get('/stubbed', function (req, res) {\r\n    res.send('hello STUBBED');\r\n});\r\n\r\nconsole.log(\"Registering endpoint: /testing\");\r\napp.get('/testing', function (req, res) {\r\n    res.send('this is a test endpoint');\r\n});\r\n\r\nconsole.log(\"Registering endpoint: /jsonendpoint\");\r\napp.get('/jsonendpoint', function (req, res) {\r\n    res.json({\r\n        \"mykey\": \"myvalue\",\r\n        \"testy\": \"something\",\r\n        \"exnum\": 123\r\n    });\r\n});\r\n\r\napp.get('/data', function (req, res) {\r\n    db.get(\"SELECT value FROM counts\", function (err, row) {\r\n        res.json({\r\n            \"count\": row.value\r\n        });\r\n    });\r\n});\r\n\r\napp.post('/data', function (req, res) {\r\n    db.run(\"UPDATE counts SET value = value + 1 WHERE key = ?\", \"counter\", function (err, row) {\r\n        if (err) {\r\n            console.err(err);\r\n            res.status(500);\r\n        } else {\r\n            res.status(202);\r\n        }\r\n        res.end();\r\n    });\r\n});\r\n\r\n\r\napp.listen(3000);*/","    var fs = require(\"fs\");\r\n    var file = \"reviewdb.db\";\r\n    var exists = fs.existsSync(file);\r\n    var sqlite3 = require(\"sqlite3\").verbose();\r\n    var sql = \"select * from Task\";\r\n\r\n    //Doesn't work globally\r\n\r\n    var database = function () {};\r\n\r\n    //Replace with connection pooling later\r\n\r\n    database.prototype.getConnection = function () {\r\n        var db = new sqlite3.Database(file);\r\n        return db;\r\n    }\r\n\r\n    database.prototype.ConnectAndQuery = function (sql, callback) {\r\n        var db = new sqlite3.Database(file);\r\n        console.log(\"Query SQL : \" + sql);\r\n        console.log(file);\r\n        db.serialize(function () {\r\n            db.each(sql, function (err, row) {\r\n                console.log(row.TaskId + \": \" + row.Status + \" : \" + row.RaiserUserId);\r\n            });\r\n        });\r\n        db.close();\r\n    }\r\n\r\n    module.exports = database;\r\n\r\n    //Full example    \r\n    /*    \r\n        var testfunc = function () {};\r\n\r\n        testfunc.prototype.log = function () {\r\n            console.log(\"test\"); //sql\r\n        };\r\n\r\n\r\n        //sql, callback\r\n        testfunc.prototype.log1 = function (sql, callback) {\r\n            console.log(sql); //sql\r\n        };\r\n\r\n        module.exports = testfunc;\r\n    */\r\n\r\n    function myfunc() {\r\n\r\n    }\r\n\r\n\r\n    //module.exports.ConnectAndQuery = func2;\r\n\r\n    //    var stmt = db.prepare(\"INSERT INTO Stuff VALUES (?)\");\r\n    //        stmt.run(\"Thing #\" + rnd);\r\n    //    stmt.finalize();\r\n    //        db.each(\"SELECT * FROM Task\", function (err, row) {\r\n    //            console.log(row.TaskId + \": \" + row.Status + \" : \" + row.RaiserUserId);\r\n\r\n    var complete = function (err, numrows) {\r\n        stmt.finalize();\r\n        db.close();\r\n        console.log(\"Complete\");\r\n\r\n    };\r\n\r\n    //Works globally\r\n    /*\r\n        foo = function () {\r\n            console.log(\"Boo\");\r\n        }\r\n    */\r\n\r\n    //Works in isolation\r\n    /*    exports.huh = function () {\r\n            console.log(\"Huh\");\r\n        }\r\n    */\r\n    /* works okay\r\n        var buz = function () {};\r\n\r\n        buz.prototype.bux = function () {\r\n            console.log(\"bux\");\r\n        }\r\n\r\n        module.exports = new buz();\r\n    */","// String.js - liberated from MicrosoftAjax.js on 03/28/10 by Sky Sanders \r\n// permalink: http://stackoverflow.com/a/2534834/2343\r\n\r\n/*\r\n    Copyright (c) 2009, CodePlex Foundation\r\n    All rights reserved.\r\n\r\n    Redistribution and use in source and binary forms, with or without modification, are permitted \r\n    provided that the following conditions are met:\r\n\r\n    *   Redistributions of source code must retain the above copyright notice, this list of conditions \r\n        and the following disclaimer.\r\n\r\n    *   Redistributions in binary form must reproduce the above copyright notice, this list of conditions \r\n        and the following disclaimer in the documentation and/or other materials provided with the distribution.\r\n\r\n    *   Neither the name of CodePlex Foundation nor the names of its contributors may be used to endorse or \r\n        promote products derived from this software without specific prior written permission.\r\n\r\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY EXPRESS OR IMPLIED \r\n    WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR \r\n    A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE \r\n    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \r\n    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \r\n    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, \r\n    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN \r\n    IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</textarea>\r\n*/\r\n\r\n(function (global) {\r\n\r\n    $type = String;\r\n    $type.__typeName = 'String';\r\n    $type.__class = true;\r\n\r\n    $prototype = $type.prototype;\r\n    $prototype.endsWith = function String$endsWith(suffix) {\r\n        /// <summary>Determines whether the end of this instance matches the specified string.</summary>\r\n        /// <param name=\"suffix\" type=\"String\">A string to compare to.</param>\r\n        /// <returns type=\"Boolean\">true if suffix matches the end of this instance; otherwise, false.</returns>\r\n        return (this.substr(this.length - suffix.length) === suffix);\r\n    }\r\n\r\n    $prototype.startsWith = function String$startsWith(prefix) {\r\n        /// <summary >Determines whether the beginning of this instance matches the specified string.</summary>\r\n        /// <param name=\"prefix\" type=\"String\">The String to compare.</param>\r\n        /// <returns type=\"Boolean\">true if prefix matches the beginning of this string; otherwise, false.</returns>\r\n        return (this.substr(0, prefix.length) === prefix);\r\n    }\r\n\r\n    $prototype.trim = function String$trim() {\r\n        /// <summary >Removes all leading and trailing white-space characters from the current String object.</summary>\r\n        /// <returns type=\"String\">The string that remains after all white-space characters are removed from the start and end of the current String object.</returns>\r\n        return this.replace(/^\\s+|\\s+$/g, '');\r\n    }\r\n\r\n    $prototype.trimEnd = function String$trimEnd() {\r\n        /// <summary >Removes all trailing white spaces from the current String object.</summary>\r\n        /// <returns type=\"String\">The string that remains after all white-space characters are removed from the end of the current String object.</returns>\r\n        return this.replace(/\\s+$/, '');\r\n    }\r\n\r\n    $prototype.trimStart = function String$trimStart() {\r\n        /// <summary >Removes all leading white spaces from the current String object.</summary>\r\n        /// <returns type=\"String\">The string that remains after all white-space characters are removed from the start of the current String object.</returns>\r\n        return this.replace(/^\\s+/, '');\r\n    }\r\n\r\n    $type.format = function String$format(format, args) {\r\n        /// <summary>Replaces the format items in a specified String with the text equivalents of the values of   corresponding object instances. The invariant culture will be used to format dates and numbers.</summary>\r\n        /// <param name=\"format\" type=\"String\">A format string.</param>\r\n        /// <param name=\"args\" parameterArray=\"true\" mayBeNull=\"true\">The objects to format.</param>\r\n        /// <returns type=\"String\">A copy of format in which the format items have been replaced by the   string equivalent of the corresponding instances of object arguments.</returns>\r\n        return String._toFormattedString(false, arguments);\r\n    }\r\n\r\n    $type._toFormattedString = function String$_toFormattedString(useLocale, args) {\r\n        var result = '';\r\n        var format = args[0];\r\n\r\n        for (var i = 0;;) {\r\n            // Find the next opening or closing brace\r\n            var open = format.indexOf('{', i);\r\n            var close = format.indexOf('}', i);\r\n            if ((open < 0) && (close < 0)) {\r\n                // Not found: copy the end of the string and break\r\n                result += format.slice(i);\r\n                break;\r\n            }\r\n            if ((close > 0) && ((close < open) || (open < 0))) {\r\n\r\n                if (format.charAt(close + 1) !== '}') {\r\n                    throw new Error('format stringFormatBraceMismatch');\r\n                }\r\n\r\n                result += format.slice(i, close + 1);\r\n                i = close + 2;\r\n                continue;\r\n            }\r\n\r\n            // Copy the string before the brace\r\n            result += format.slice(i, open);\r\n            i = open + 1;\r\n\r\n            // Check for double braces (which display as one and are not arguments)\r\n            if (format.charAt(i) === '{') {\r\n                result += '{';\r\n                i++;\r\n                continue;\r\n            }\r\n\r\n            if (close < 0) throw new Error('format stringFormatBraceMismatch');\r\n\r\n\r\n            // Find the closing brace\r\n\r\n            // Get the string between the braces, and split it around the ':' (if any)\r\n            var brace = format.substring(i, close);\r\n            var colonIndex = brace.indexOf(':');\r\n            var argNumber = parseInt((colonIndex < 0) ? brace : brace.substring(0, colonIndex), 10) + 1;\r\n\r\n            if (isNaN(argNumber)) throw new Error('format stringFormatInvalid');\r\n\r\n            var argFormat = (colonIndex < 0) ? '' : brace.substring(colonIndex + 1);\r\n\r\n            var arg = args[argNumber];\r\n            if (typeof (arg) === \"undefined\" || arg === null) {\r\n                arg = '';\r\n            }\r\n\r\n            // If it has a toFormattedString method, call it.  Otherwise, call toString()\r\n            if (arg.toFormattedString) {\r\n                result += arg.toFormattedString(argFormat);\r\n            } else if (useLocale && arg.localeFormat) {\r\n                result += arg.localeFormat(argFormat);\r\n            } else if (arg.format) {\r\n                result += arg.format(argFormat);\r\n            } else\r\n                result += arg.toString();\r\n\r\n            i = close + 1;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n})(global);","'use strict';\r\n\r\nvar taskAssignment = class TaskAssignment {\r\n\r\n    constructor(properties) {\r\n        this.TaskId = properties.TaskId;\r\n        this.DateAssigned = properties.DateAssigned;\r\n        this.GroupId = properties.GroupId;\r\n        this.AccessType = properties.AccessType;\r\n        this.NodeId = properties.NodeId;\r\n\r\n        var TableName = 'TaskAssignment';\r\n        //var Keys = {'TaskId', 'GroupId'};\r\n\r\n        //Is there a way to iterate the properties in a javascript object?  Never tried it.\r\n        //Maybe instead of unique properties we could have a dictionary object of name value pairs?\r\n        //Then we could have a generic class for all the tables\r\n        //Might be gettting carried away here\r\n\r\n        //var fields = {'DateAssigned','AccessType','NodeId'};\r\n\r\n        //sInsertSQL = 'Insert into ' . TableName . '(TaskId, GroupId, DateAssigned, AccessType, NodeId) Values (' . _TaskId . ',' . \r\n\r\n    }\r\n\r\n    /* If you define getters only, Node then decides you want read only properties.  If you define nothing, you get read/write properties ipso facto\r\n        get TaskId() {\r\n            return this.make;\r\n        }\r\n\r\n        get DateAssigned() {\r\n            return this.DateAssigned;\r\n        }\r\n        get GroupId() {\r\n            return this.GroupId;\r\n        }\r\n        get AccessType() {\r\n            return this.AccessType;\r\n        }\r\n        get NodeId() {\r\n            return this.NodeId;\r\n        }\r\n\r\n        set TaskId() {\r\n            return this.make;\r\n        }\r\n\r\n        set DateAssigned() {\r\n            return this.DateAssigned;\r\n        }\r\n        set GroupId() {\r\n            return this.GroupId;\r\n        }\r\n        set AccessType() {\r\n            return this.AccessType;\r\n        }\r\n        set NodeId() {\r\n            return this.NodeId;\r\n        }\r\n    */\r\n\r\n\r\n    toString() {\r\n        return '${this.TaskId} ${this.DataAssigned}';\r\n    }\r\n\r\n    type() {\r\n        return Object.getPrototypeOf(this);\r\n    }\r\n};\r\n\r\nmodule.exports = taskAssignment;","'use strict';\r\n\r\nvar taskRepository =\r\n\r\n    class TaskRepository {\r\n\r\n        constructor(Options) {\r\n            this.WorkflowProcessId = Options.WorkflowProcessId;\r\n            this.dbContext = Options.dbContext;\r\n        }\r\n\r\n        load(theObject, callme) {\r\n            //Hard coded SQL as proof of concept\r\n            //_dbContext\r\n            console.log('load');\r\n            console.log('instance of ');\r\n            console.log(Object.getPrototypeOf(theObject));\r\n            var theType = theObject.type();\r\n            console.log(theType);\r\n            //Should really bootstrap this from an array, hard coded just to get a prototype done\r\n\r\n            console.log(theType.toString());\r\n\r\n            var sql = \"\";\r\n\r\n            switch (theType) {\r\n            case \"Task\":\r\n                sql = \"select * from task where TaskId = {0}\";\r\n                break;\r\n            case \"Task Assignment\":\r\n                sql = \"select * from task where taskid = {0}\";\r\n                break;\r\n            default:\r\n                //\r\n            }\r\n\r\n            var cb = function cbres(rows, rowCount) {\r\n                console.log(\"End Rows:\" + rowCount);\r\n                console.log(rows);\r\n            }\r\n\r\n            //Replace parameters with values  (should have used stored procs, would have been quicker than writing a string format function!\r\n\r\n\r\n\r\n            this.dbContext.ConnectAndQuery(sql, cb);\r\n        }\r\n\r\n        save(theObject, callme) {\r\n            //Hard coded SQL as proof of concept\r\n            //_dbContext\r\n            console.log('save');\r\n            console.log('instance of ');\r\n            console.log(Object.getPrototypeOf(theObject));\r\n            //switch statement here when have more than one class\r\n            var sql = \"select * from task\";\r\n            this.dbContext.ConnectAndQuery(sql, callme);\r\n        }\r\n    };\r\n\r\nmodule.exports = taskRepository;","var Connection = require('tedious').Connection;\r\nvar Request = require('tedious').Request;\r\nvar bDebug = true;\r\n\r\nvar config = {\r\n    userName: 'radmin',\r\n    password: 'password',\r\n    port: '1433',\r\n    server: 'PW-000011',\r\n    options: {\r\n        encrypt: false,\r\n        database: 'ReviewProject',\r\n        rowCollectionOnDone: true,\r\n        rowCollectionOnRequestCompletion: true,\r\n        useColumnNames: false\r\n    }\r\n};\r\n\r\nconsole.log('Get Connection');\r\nvar connection;\r\n\r\nvar database = function () {};\r\n\r\n//No checks on SQL - just a Proof of Concept this\r\n//The idea of this function is to let us swap in connection pooling later\r\ndatabase.prototype.getConnection = function getConnection() {\r\n    connection = new Connection(config);\r\n    return connection;\r\n};\r\n\r\ndatabase.prototype.ConnectAndQuery = function ConnectAndQuery(sql, callback) {\r\n    console.log('Connect and Query SQL: ' + sql);\r\n    var thesql = sql;\r\n    connection = this.getConnection();\r\n    connection.on('connect', function (err) {\r\n        // If no error, then good to go...\r\n        console.log(\"Conected - execute\" + sql);\r\n        executeStatement(sql, callback);\r\n    });\r\n\r\n    connection.on('error', function (err) {\r\n        console.log(\"Error Connecting: \" + err);\r\n    });\r\n\r\n    connection.on('debug', function (text) {\r\n        console.log(\"Debug Connecting: \" + text);\r\n    });\r\n};\r\n\r\n//Internal Function\r\n\r\nfunction executeStatement(sql, callback) {\r\n    console.log('execute statement');\r\n    var retval = '';\r\n    request = new Request(sql, function (err, rowCount, rows) {\r\n        if (err) {\r\n            console.log(\"Request failed: \" + err);\r\n        } else {\r\n            var rowarray = [];\r\n            console.log(rowCount + ' rows');\r\n            //callback(rows);\r\n            //return rows;\r\n        }\r\n        //Not sure if this should be wrapped in its own function to allow for connection pooling.\r\n        //connection.close();\r\n\r\n    });\r\n    var rowcounter = 0;\r\n    request.on('row', function (columns) {\r\n        rowcounter++;\r\n        console.log('Row' + rowcounter);\r\n\r\n        var colval = \"\";\r\n        //if (bDebug) {\r\n        columns.forEach(function (column) {\r\n            //console.log('Col ' + column.metadata.colName + ' : ' + column.value);\r\n            if (colval.length > 0) {\r\n                colval = colval + \",\"\r\n            }\r\n            colval = colval + column.metadata.colName + ' : ' + column.value;\r\n        });\r\n        if (retval.length > 0) {\r\n            retval = retval + \",\";\r\n        }\r\n        retval = retval + \"{\" + colval + \" }\";\r\n        //}\r\n    });\r\n    /*\r\n        request.on('done', function (rowCount, more, rows) {\r\n            console.log('Database done');\r\n            console.log('Total rows' + rowCount);\r\n            console.log(Object.getPrototypeOf(rows));\r\n            //callback(rows);\r\n\r\n        });\r\n    */\r\n    request.on('doneInProc', function (rowCount, more, rows) {\r\n        console.log('In Proc Database done');\r\n        //console.log('InProc Total rows' + rowCount);\r\n        //console.log(Object.getPrototypeOf(rows));\r\n        //console.log(rows);\r\n        console.log(retval);\r\n        //callback(rows, rowCount);\r\n        callback(retval, rowCount);\r\n    });\r\n    /*\r\n        request.on('doneProc', function (rowCount, more, rows) {\r\n            console.log('Proc Database done');\r\n            console.log('Proc Total rows' + rowCount);\r\n            console.log(Object.getPrototypeOf(rows));\r\n            callback(rows);\r\n\r\n        });\r\n    */\r\n    connection.execSql(request);\r\n}\r\n\r\nmodule.exports = database;","'use strict';\r\nvar database = require('./SqlliteDatabase.js');\r\nvar express = require('express');\r\nvar http = require('http');\r\nvar app = express();\r\n//Initial Attempt at making a repository work\r\nvar taskRepository = require('./TaskRepository.js');\r\nvar taskAssignment = require('./TaskAssignment.js');\r\n\r\nvar port = process.env.PORT || 3000;\r\nvar host = process.env.HOST || \"127.0.0.1\";\r\n\r\n\r\nconsole.log(\"Begin Web Service\");\r\n//Sanity Kill\r\nprocess.on('uncaughtException', function (err) {\r\n    console.log('Uncaught Exception ' + err + ' , quitting');\r\n    process.exit(1);\r\n});\r\n\r\nvar db = new database();\r\nvar sql = \"select * from Task\";\r\n\r\nfunction myfunc() {}\r\n\r\n//db.log();\r\n//db.log1(\"select\", myfunc);\r\n\r\ndb.ConnectAndQuery(sql, myfunc);\r\n\r\n//3 refers to WorkFlowProcessId = it's magic\r\n\r\nvar taskrepo = new taskRepository({\r\n    WorkflowProcessId: 3,\r\n    dbContext: db\r\n});\r\n\r\nvar _TaskId = 1;\r\nvar _DateAssigned = '15/1/2015';\r\nvar _GroupId = '1';\r\nvar _AccessType = 1;\r\nvar _NodeId = 1;\r\n\r\nvar theTaskAssignment = new taskAssignment({\r\n    TaskId: _TaskId,\r\n    DateAssigned: _DateAssigned,\r\n    GroupId: _GroupId,\r\n    AccessType: _AccessType,\r\n    NodeId: _NodeId\r\n});\r\n\r\nconsole.log(theTaskAssignment.DateAssigned);\r\n\r\ntaskrepo.load(theTaskAssignment, myfunc);\r\n\r\n\r\n//taskrepo.save(theTaskAssignment, myfunc);\r\n\r\n\r\n\r\n\r\n\r\n//Web Service Code\r\n\r\nconsole.log(\"Registering endpoint: /\");\r\napp.get('/', function (req, res) {\r\n    res.send('PW Review Process Web Service');\r\n});\r\n\r\nconsole.log(\"Registering endpoint: /Initialise\");\r\napp.get('/Initialise', function (req, res) {\r\n    res.send('Begin Review Process');\r\n});\r\n\r\nconsole.log(\"Registering endpoint: /End\");\r\napp.get('/End', function (req, res) {\r\n    res.send('End Review Process');\r\n});\r\n\r\nconsole.log(\"Registering endpoint: /Approve\");\r\napp.get('/Approve', function (req, res) {\r\n    res.send('Approved');\r\n});\r\n\r\nconsole.log(\"Registering endpoint: /Reject\");\r\napp.get('/Reject', function (req, res) {\r\n    res.send('Rejected');\r\n});\r\n\r\nconsole.log(\"Registering endpoint: /getTask\");\r\napp.get('/getTask', function (req, res) {\r\n    var sql = \"SELECT value, detail FROM counts\";\r\n    db.ConnectAndQuery(sql, function (err, row) {\r\n        res.json({\r\n            \"value\": row.value,\r\n            \"detail\": row.detail\r\n        });\r\n    });\r\n});\r\n\r\napp.post('/setTask', function (req, res) {\r\n    db.run(\"UPDATE counts SET value = value + 1 WHERE key = ?\", \"counter\", function (err, row) {\r\n        if (err) {\r\n            console.err(err);\r\n            res.status(500);\r\n        } else {\r\n            res.status(202);\r\n        }\r\n        res.end();\r\n    });\r\n});\r\n\r\nvar server = http.createServer(app).listen(port, host, function () {\r\n    console.log(\"Server listening to %s:%d within %s environment\",\r\n        host, port, app.get('env'));\r\n});\r\n\r\napp.listen(port);","var string = require('lib');\r\nfef;\r\ntest;\r\ndew","'use strict';\r\nvar database = require('./TediousDatabase.js');\r\nvar express = require('express');\r\nvar http = require('http');\r\nvar app = express();\r\n//Initial Attempt at making a repository work\r\nvar taskRepository = require('./TaskRepository.js');\r\nvar taskAssignment = require('./TaskAssignment.js');\r\n\r\nvar port = process.env.PORT || 3000;\r\nvar host = process.env.HOST || \"127.0.0.1\";\r\n\r\n\r\nconsole.log(\"Begin Web Service\");\r\n//Sanity Kill\r\nprocess.on('uncaughtException', function (err) {\r\n    console.log('Uncaught Exception ' + err + ' , quitting');\r\n    process.exit(1);\r\n});\r\n\r\n\r\nvar db = new database();\r\nvar sql = \"select * from Task\";\r\nvar myf = function myfunc(rows, rowCount) {\r\n    console.log(\"End Rows:\" + rowCount);\r\n    console.log(\"End\");\r\n    console.log(Object.getPrototypeOf(rows));\r\n    console.log(rows);\r\n    console.log(\"###############################################################\");\r\n    runRestOfServer();\r\n}\r\nconsole.log(\"****************************************************************\");\r\ndb.ConnectAndQuery(sql, myf);\r\n\r\n//3 refers to WorkFlowProcessId = it's magic\r\n\r\nvar captureresults = function resultcap(rows, rowCount) {\r\n    console.log(\"Result Capture:\" + rowCount);\r\n    console.log(Object.getPrototypeOf(rows));\r\n    console.log(rows);\r\n}\r\n\r\nvar runRestOfServer = function () {\r\n\r\n    var taskrepo = new taskRepository({\r\n        WorkflowProcessId: 3,\r\n        dbContext: db\r\n    });\r\n\r\n    var _TaskId = 1;\r\n    var _DateAssigned = '15/1/2015';\r\n    var _GroupId = '1';\r\n    var _AccessType = 1;\r\n    var _NodeId = 1;\r\n\r\n    var theTaskAssignment = new taskAssignment({\r\n        TaskId: _TaskId,\r\n        DateAssigned: _DateAssigned,\r\n        GroupId: _GroupId,\r\n        AccessType: _AccessType,\r\n        NodeId: _NodeId\r\n    });\r\n\r\n    console.log(\"Date Task Assigned : \" + theTaskAssignment.DateAssigned);\r\n\r\n    taskrepo.load(theTaskAssignment, captureresults);\r\n\r\n    //taskrepo.save(theTaskAssignment, myfunc);\r\n}\r\n\r\n\r\n\r\n\r\n//Web Service Code\r\n\r\nconsole.log(\"Registering endpoint: /\");\r\napp.get('/', function (req, res) {\r\n    res.send('PW Review Process Web Service');\r\n});\r\n\r\nconsole.log(\"Registering endpoint: /Initialise\");\r\napp.get('/Initialise', function (req, res) {\r\n    res.send('Begin Review Process');\r\n});\r\n\r\nconsole.log(\"Registering endpoint: /End\");\r\napp.get('/End', function (req, res) {\r\n    res.send('End Review Process');\r\n});\r\n\r\nconsole.log(\"Registering endpoint: /Approve\");\r\napp.get('/Approve', function (req, res) {\r\n    res.send('Approved');\r\n});\r\n\r\nconsole.log(\"Registering endpoint: /Reject\");\r\napp.get('/Reject', function (req, res) {\r\n    res.send('Rejected');\r\n});\r\n\r\nconsole.log(\"Registering endpoint: /getTask\");\r\napp.get('/getTask', function (req, res) {\r\n    var sql = \"SELECT value, detail FROM counts\";\r\n    db.ConnectAndQuery(sql, function (err, row) {\r\n        res.json({\r\n            \"value\": row.value,\r\n            \"detail\": row.detail\r\n        });\r\n    });\r\n});\r\n\r\napp.post('/setTask', function (req, res) {\r\n    db.run(\"UPDATE counts SET value = value + 1 WHERE key = ?\", \"counter\", function (err, row) {\r\n        if (err) {\r\n            console.err(err);\r\n            res.status(500);\r\n        } else {\r\n            res.status(202);\r\n        }\r\n        res.end();\r\n    });\r\n});\r\n\r\nvar server = http.createServer(app).listen(port, host, function () {\r\n    console.log(\"Server listening to %s:%d within %s environment\",\r\n        host, port, app.get('env'));\r\n});\r\n\r\napp.listen(port);"],"sourceRoot":"/source/"}